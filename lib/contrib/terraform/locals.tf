locals {
  zip_deployment_used = alltrue([
    var.filename != null ? true : false,
  ])
  s3_deployment_used = alltrue([
    var.s3_bucket != null ? true : false,
    var.s3_key != null ? true : false,
  ])
  image_deployment_used = alltrue([
    var.image_uri != null ? true : false,
  ])


  deployments = {
    archive_zip = {
      type        = local.zip_deployment_used ? "zip" : null
      output_path = local.zip_deployment_used ? var.filename : null
      source_dir  = local.zip_deployment_used ? var.source_dir != null ? var.source_dir : dir(var.filename) : null
    }

    archive_s3 = {
      type   = local.s3_deployment_used ? "s3" : null
      bucket = local.s3_deployment_used ? var.s3_bucket : null
      key    = local.s3_deployment_used ? var.s3_key : null
    }
  }

  epsagon_layer_response = jsondecode(data.http.layer_arn.body)
  epsagon_layer_arn      = local.epsagon_layer_response.LayerVersions[0].LayerVersionArn
  handler_split          = split(".", var.handler)
  handler_relative_path  = join(".", slice(local.handler_split, 0, length(local.handler_split) - 1))
  handler_method_name    = element(local.handler_split, length(local.handler_split) - 1)
  epsagon_handler_f      = "epsagon_handlers_${var.function_name}"
  epsagon_handler = join(".", [
    local.epsagon_handler_f,
    local.handler_method_name,
  ])
  epsagon_handlers_filename = join(
    "/",
    [
      local.deployments.archive_zip.source_dir,
      join(".", [
        local.epsagon_handler_f,
        local.language_to_f_extensions[
          local.runtime_to_language[var.runtime]
        ]
      ])
    ]
  )

  runtime_to_language = {
    "nodejs10.x" = "node"
    "nodejs12.x" = "node"
    "nodejs14.x" = "node"
    "python2.7"  = "python"
    "python3.6"  = "python"
    "python3.7"  = "python"
    "python3.8"  = "python"
  }

  language_to_f_extensions = {
    "node"   = "js"
    "python" = "py"
  }


  wrappers = {
    "node" = <<-EOF

      /*
       * THIS FILE WAS AUTOMATICALLY GENERATED BY EPSAGON.
       * DO NOT MANUALLY EDIT.
       */


      const epsagonHandler = require('./${local.handler_relative_path}.${local.language_to_f_extensions[
    local.runtime_to_language[var.runtime]
]}');
      exports.${local.handler_method_name} = epsagonHandler.${local.handler_method_name};

      try {
          process.env.EPSAGON_DEBUG = '${upper(var.debug)}';

          const epsagon = require('epsagon');
          epsagon.init({
              token: '${var.token}',
              appName: '${var.app_name}',
              traceCollectorURL: '${var.collector_url}',
              metadataOnly: ${var.metadata_only},
          });

          exports.${local.handler_method_name} = epsagon.lambdaWrapper(exports.${local.handler_method_name});
      } catch (err) {
          console.log('Warning: Epsagon package not found. The Function will not be monitored.');
      }
      EOF

"python" = <<-EOF

      """
      THIS FILE WAS AUTOMATICALLY GENERATED BY EPSAGON.
      DO NOT MANUALLY EDIT.
      """

      import ${local.handler_relative_path}
      ${local.handler_method_name} = ${local.handler_relative_path}.${local.handler_method_name}

      try:
          import os
          import epsagon
          null = undefined = None
          epsagon.init(
              token='${var.token}',
              app_name='${var.app_name}',
              debug=bool('${var.debug}'),
              collector_url='${var.collector_url}',
              metadata_only=bool('${var.metadata_only}'),
          )
          ${local.handler_method_name} = epsagon.lambda_wrapper(${local.handler_method_name})
      except:
          print('Warning: Epsagon package not found. The Function will not be monitored.')

      EOF
}
}